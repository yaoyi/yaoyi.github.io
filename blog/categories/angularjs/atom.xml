<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | yaoyi]]></title>
  <link href="http://yaoyi.github.io/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://yaoyi.github.io/"/>
  <updated>2013-12-27T15:57:09+08:00</updated>
  <id>http://yaoyi.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[linyaoyi011@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://yaoyi.github.io/blog/2013/10/10/hello-world/"/>
    <updated>2013-10-10T14:05:00+08:00</updated>
    <id>http://yaoyi.github.io/blog/2013/10/10/hello-world</id>
    <content type="html"><![CDATA[<p>hello world</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[angularjs drag and drop]]></title>
    <link href="http://yaoyi.github.io/blog/2013/10/10/angularjs-drag-and-drop/"/>
    <updated>2013-10-10T14:05:00+08:00</updated>
    <id>http://yaoyi.github.io/blog/2013/10/10/angularjs-drag-and-drop</id>
    <content type="html"><![CDATA[<p>官网tab directive
<a href="http://docs.angularjs.org/guide/directive">http://docs.angularjs.org/guide/directive</a></p>

<p>官网的module</p>

<p><a href="http://docs.angularjs.org/guide/directive">http://docs.angularjs.org/guide/directive</a>
```
angular.module(&lsquo;dragModule&rsquo;, []).
  directive(&lsquo;myDraggable&rsquo;, function($document) {</p>

<pre><code>return function(scope, element, attr) {
  var startX = 0, startY = 0, x = 0, y = 0;

  element.css({
   position: 'relative',
   border: '1px solid red',
   backgroundColor: 'lightgrey',
   cursor: 'pointer'
  });

  element.on('mousedown', function(event) {
    // Prevent default dragging of selected content
    event.preventDefault();
    startX = event.pageX - x;
    startY = event.pageY - y;
    $document.on('mousemove', mousemove);
    $document.on('mouseup', mouseup);
  });

  function mousemove(event) {
    y = event.pageY - startY;
    x = event.pageX - startX;
    element.css({
      top: y + 'px',
      left:  x + 'px'
    });
  }

  function mouseup() {
    $document.unbind('mousemove', mousemove);
    $document.unbind('mouseup', mouseup);
  }
}
</code></pre>

<p>  });
```</p>

<p>使用jquery-ui的drag and drop</p>

<p><a href="https://github.com/codef0rmer/angular-dragdrop">https://github.com/codef0rmer/angular-dragdrop</a></p>

<p>太重</p>

<p>另外一个不错的实现
<a href="http://logicbomb.github.io/ng-directives/drag-drop.html">http://logicbomb.github.io/ng-directives/drag-drop.html</a></p>

<p>有很多angularjs的directive
<a href="http://www.directiv.es/">http://www.directiv.es/</a></p>

<p>native drag-and-drop</p>

<p><a href="http://blog.parkji.co.uk/2013/08/11/native-drag-and-drop-in-angularjs.html">http://blog.parkji.co.uk/2013/08/11/native-drag-and-drop-in-angularjs.html</a></p>

<p>对应的实现
<a href="http://ganarajpr.github.io/angular-dragdrop/">http://ganarajpr.github.io/angular-dragdrop/</a></p>

<p>在onDrop中要記得不要刪除drag的element, 否則element的dragend就不會被調用，一些binding就不能得到清除,
如果要刪除元素，請在on-drop-success中操作， drag和drop操作獨立有好處，但也增加了維護的複雜度</p>

<p>上述的實現，在判斷是否成功drop的時候，是在drag的元素的 dragend事件中判斷 e.dataTransfer.dropEffect是否為none,
因為設置ui-on-drop的元素，會綁定dragover等事件，並且在 dragover的時候將e.dataTransfer.dropEffect設置為"move"
所以在dragend中如果為move，則認為element drop sucess.
但這個帶來的問題就是, 沒有辦法和plupload的drop上傳和平共處, 通過dropEffect判斷是否成功也不夠獨立, 覺得應該需要設置獨立的標誌</p>

<p>嘗試直接在onDrop事件中調用dataTranfer.setData, 但是失敗了
因為出於安全考慮
在dragstart事件中，可以調用e.dataTransfer.setData設置任何的值, 在onDrop中通過e.dataTransfer.getData獲取
但是dragenter等中間事件沒有權限訪問這些值，擔心dragover的一些中間元素會設置listener從而獲取這些值
這裡有一些解釋<a href="http://stackoverflow.com/questions/8762635/getting-the-filename-during-the-dragenter-event">http://stackoverflow.com/questions/8762635/getting-the-filename-during-the-dragenter-event</a></p>

<p>經測試, 在onDrop中e.dataTransfer.setData不能成功</p>

<p>想參考ANGULAR_DRAG_START, 利用 angular的事件機制，在原有的ANGULAR_DRAG_START,ANGULAR_DRAG_END的基礎上再增加ANGULAR_DROP_SUCCESS
經過測試發現，如果在draggable的item上綁定ANGULAR_DROP_SUCCESS, 因為有多少個item就會綁定多少次, 而且觸發ANGULAR_DROP_SUCCESS的時候，所有都會響應，不成功</p>

<p>最後還是使用了callback, 在uiDraggable內部定義了callback, 然後通過$rootScope.$broadcast傳遞給drop element, 最後在onDrop中囘調
```
var dropped = false
function onDrop(e){</p>

<pre><code>console.log('hello drop success')
dropped = true
</code></pre>

<p>}
element.bind(&ldquo;dragend&rdquo;, function (e) {</p>

<pre><code>if(dropped)
{
    if (attrs.onDropSuccess) {
        var fn = $parse(attrs.onDropSuccess);
        scope.$apply(function () {
            fn(scope, {$event: e});
        });
    }    
}
dropped = false
</code></pre>

<p>});
```</p>

<p>ondrop先觸發dragend后觸發，但不能保證對應囘調函數的執行順序也是ondrop在前, 但為了簡化操作，還是認為drop在dragend之前執行</p>

<p>通過囘調設置flag, 再由dragend判斷flag執行刪除element操作基本符合了預期，之所以不在囘調就刪除元素，是因為dragend需要被調用來做一些清理去綁定的操作，否則後續的drag操作中會出現重複調用的問題, 如果在onDrop囘調中就刪除element, dragend就不會被調用
之所以要動態綁定和解綁，和channel的引入都是爲了提高靈活性，與其他可能的drag&amp;drop操作區分開，否則比如一直綁定，從頁面外拖入文件也會得到響應，但就會出現問題</p>

<p>現在單個的drag&amp;drop沒有問題
開始考慮multi-drag&amp;drop
首先multi drop的時候就需要隱藏沒有被drag的選中items, 所以要先新增一個callback, on-drag-start</p>

<p>開始考慮拖動的效果問題</p>

<p><a href="http://threedubmedia.com/demo/drag/">http://threedubmedia.com/demo/drag/</a>
這裡的效果需要額外的jquery.event.drag插件輔助</p>

<p><a href="http://www.kryogenix.org/code/browser/custom-drag-image.html">http://www.kryogenix.org/code/browser/custom-drag-image.html</a></p>

<p><a href="http://www.html5rocks.com/en/tutorials/dnd/basics/">http://www.html5rocks.com/en/tutorials/dnd/basics/</a></p>

<p>官方文檔
<a href="http://www.w3.org/TR/2011/WD-html5-20110405/dnd.html">http://www.w3.org/TR/2011/WD-html5-20110405/dnd.html</a></p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>

<ol>
<li>fancybox 和div drag IE有冲突, 通过限制a href长度解决</li>
<li>在upload之后select失效</li>
<li>将orderBy直接移到common</li>
<li>IE drag 无法调用onDropSuccess, 原来是是IE无法修改 e.dataTransfer.dropEffect的值</li>
</ol>

]]></content>
  </entry>
  
</feed>
